#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};
struct TreeNode* createNode(int val) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->val = val;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
int prevValue = INT_MIN;
bool isValidBST(struct TreeNode* root) {
    if (root == NULL) {
        return true;
    }
    if (!isValidBST(root->left)) {
        return false;
    }
    if (root->val <= prevValue) {
        return false;
    }
    prevValue = root->val;
    return isValidBST(root->right);
}
int main() {
    struct TreeNode* root = createNode(2);
    root->left = createNode(1);
    root->right = createNode(3);
    if (isValidBST(root)) {
        printf("The tree is a valid BST.\n");
    } else {
        printf("The tree is not a valid BST.\n");
    }
    free(root->left);
    free(root->right);
    free(root);
    return 0;
}
